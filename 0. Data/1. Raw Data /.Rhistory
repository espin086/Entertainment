}
?sapply
sapply(c(1,2,3,4,5,6), plots)
plots <- function(x) {
plot(stocks[[x]], type = 'l', col="red",
ylab = "Stock Price", xlab = "Date",
main = paste0(tickers[[x]], " Stock Price"))
}
sapply(c(1,2,3,4,5,6), plots)
seq(1:6)
sapply(seq(1:6), plots)
sapply(seq(1:6), plots)
plots <- function(x) {
plot(stocks[[x]], type = 'l', col="red",
ylab = "Stock Price", xlab = "Date",
main = paste0(tickers[[x]], " Stock Price"))
}
sapply(seq(1:length(tickers)), plots)
summary(stocks[[1]])
print(tickers[[1]])
summary(stocks[[1]])
print(tickers[[1]]); summary(stocks[[1]])
plots <- function(x) {
plot(stocks[[x]], type = 'l', col="red",
ylab = "Stock Price", xlab = "Date",
main = paste0(tickers[[x]], " Stock Price"))
print(tickers[[1]]); summary(stocks[[1]])
}
sapply(seq(1:length(tickers)), plots)
plots <- function(x) {
plot(stocks[[x]], type = 'l', col="red",
ylab = "Stock Price", xlab = "Date",
main = paste0(tickers[[x]], " Stock Price"))
print(tickers[[i]]); summary(stocks[[i]])
}
sapply(seq(1:length(tickers)), plots)
plots <- function(x) {
plot(stocks[[x]], type = 'l', col="red",
ylab = "Stock Price", xlab = "Date",
main = paste0(tickers[[x]], " Stock Price"))
print(tickers[[x]]); summary(stocks[[x]])
}
sapply(seq(1:length(tickers)), plots)
plots <- function(x) {
plot(stocks[[x]], type = 'l', col="red",
ylab = "Stock Price", xlab = "Date",
main = paste0(tickers[[x]], " Stock Price"))
a <- tickers[[x]]
b <- summary(stocks[[x]])
cbind(a,b)
}
sapply(seq(1:length(tickers)), plots)
plots <- function(x) {
plot(stocks[[x]], type = 'l', col="red",
ylab = "Stock Price", xlab = "Date",
main = paste0(tickers[[x]], " Stock Price"))
print(tickers[[x]]); summary(stocks[[x]])
}
sapply(seq(1:length(tickers)), plots)
plots <- function(x) {
plot(stocks[[x]], type = 'l', col="red",
ylab = "Stock Price", xlab = "Date",
main = paste0(tickers[[x]], " Stock Price"))
print(tickers[[x]]); summary(stocks[[x]])
}
summary <- sapply(seq(1:length(tickers)), plots)
plots <- function(x) {
plot(stocks[[x]], type = 'l', col="red",
ylab = "Stock Price", xlab = "Date",
main = paste0(tickers[[x]], " Stock Price"))
print(tickers[[x]]); summary(stocks[[x]])
}
summary <- sapply(seq(1:length(tickers)), plots)
View(summary)
names(summary) <- tickers
View(summary)
names(summary)
tickers
plots <- function(x) {
plot(stocks[[x]], type = 'l', col="red",
ylab = "Stock Price", xlab = "Date",
main = paste0(tickers[[x]], " Stock Price"))
print(tickers[[x]]); summary(stocks[[x]])
}
summary <- sapply(seq(1:length(tickers)), plots)
View(summary)
summary
colnames(summary) <- tickers
summary
#Select ticker to analyze
ticker.num <- 2
for(i in 1:length(tickers)){
ticker.num <- i #you can take this entire set of code out of the loop and manually enter #
#Creating a filter so modeling is simplified
my.stock <- stocks.clean[ , grepl( tickers[ticker.num] , names( stocks.clean ) ) ]
#Creating testing and training datasets
trainig.rows <- nrow(my.stock)*.7
training <- my.stock[1:trainig.rows, ]
testing.rows <- trainig.rows + 1
testing <- my.stock[testing.rows:nrow(my.stock),]
###################
#Logistic regresion is the simplest model to interpret
target <- training[[1]]
glm.fit <- glm(as.formula(paste(tickers[ticker.num],"~.",collapse="+")), data = training ,family = binomial)
glm.probs = predict(glm.fit, newdata = testing, type="response") #this code will predict on the training data, response outputs the probability
glm.probs[1:10]
print(hist(glm.probs)) #probablity that a given stock will go up
#turning the probability of up or down into 1 for up and 0 for down
glm.pred = rep(0, nrow(testing))
glm.pred[glm.probs >.5] = 1
##########################
#Result of logistic regression
print(table(glm.pred, testing[[1]]))#Typically the response variable is first
print(mean(glm.pred == testing[[1]])) #this gives the prediction accuracy in %
}
#Creating a filter so modeling is simplified
my.stock <- stocks.clean[ , grepl( tickers[ticker.num] , names( stocks.clean ) ) ]
#Creating testing and training datasets
trainig.rows <- nrow(my.stock)*.7
training <- my.stock[1:trainig.rows, ]
testing.rows <- trainig.rows + 1
testing <- my.stock[testing.rows:nrow(my.stock),]
###################
#Logistic regresion is the simplest model to interpret
target <- training[[1]]
glm.fit <- glm(as.formula(paste(tickers[ticker.num],"~.",collapse="+")), data = training ,family = binomial)
summary(glm.fit)
coef(glm.fit)
glm.probs = predict(glm.fit, newdata = testing, type="response") #this code will predict on the training data, response outputs the probability
glm.probs[1:10]
print(hist(glm.probs)) #probablity that a given stock will go up
#turning the probability of up or down into 1 for up and 0 for down
glm.pred = rep(0, nrow(testing))
glm.pred[glm.probs >.5] = 1
##########################
#Result of logistic regression
print(table(glm.pred, testing[[1]]))#Typically the response variable is first
print(mean(glm.pred == testing[[1]])) #this gives the prediction accuracy in %
View(my.stock)
#Select ticker to analyze
ticker.num <- 2
for(i in 1:length(tickers)){
ticker.num <- i #you can take this entire set of code out of the loop and manually enter #
#Creating a filter so modeling is simplified
my.stock <- stocks.clean[ , grepl( tickers[ticker.num] , names( stocks.clean ) ) ]
#Creating testing and training datasets
trainig.rows <- nrow(my.stock)*.7
training <- my.stock[1:trainig.rows, ]
testing.rows <- trainig.rows + 1
testing <- my.stock[testing.rows:nrow(my.stock),]
###################
#Logistic regresion is the simplest model to interpret
target <- training[[1]]
glm.fit <- glm(as.formula(paste(tickers[ticker.num],"~.",collapse="+")), data = training ,family = binomial)
glm.probs = predict(glm.fit, newdata = testing, type="response") #this code will predict on the training data, response outputs the probability
glm.probs[1:10]
print(hist(glm.probs)) #probablity that a given stock will go up
#turning the probability of up or down into 1 for up and 0 for down
glm.pred = rep(0, nrow(testing))
glm.pred[glm.probs >.5] = 1
##########################
#Result of logistic regression
print(table(glm.pred, testing[[1]]))#Typically the response variable is first
print(mean(glm.pred == testing[[1]])) #this gives the prediction accuracy in %
}
#Creating a filter so modeling is simplified
my.stock <- stocks.clean[ , grepl( tickers[ticker.num] , names( stocks.clean ) ) ]
#Creating testing and training datasets
trainig.rows <- nrow(my.stock)*.7
training <- my.stock[1:trainig.rows, ]
testing.rows <- trainig.rows + 1
testing <- my.stock[testing.rows:nrow(my.stock),]
###################
#Logistic regresion is the simplest model to interpret
target <- training[[1]]
glm.fit <- glm(as.formula(paste(tickers[ticker.num],"~.",collapse="+")), data = training ,family = binomial)
summary(glm.fit)
coef(glm.fit)
glm.probs = predict(glm.fit, newdata = testing, type="response") #this code will predict on the training data, response outputs the probability
glm.probs[1:10]
print(hist(glm.probs)) #probablity that a given stock will go up
#turning the probability of up or down into 1 for up and 0 for down
glm.pred = rep(0, nrow(testing))
glm.pred[glm.probs >.5] = 1
##########################
#Result of logistic regression
print(table(glm.pred, testing[[1]]))#Typically the response variable is first
print(mean(glm.pred == testing[[1]])) #this gives the prediction accuracy in %
#Select ticker to analyze
ticker.num <- 2
for(i in 1:length(tickers)){
ticker.num <- i #you can take this entire set of code out of the loop and manually enter #
#Creating a filter so modeling is simplified
my.stock <- stocks.clean[ , grepl( tickers[ticker.num] , names( stocks.clean ) ) ]
#Creating testing and training datasets
trainig.rows <- nrow(my.stock)*.7
training <- my.stock[1:trainig.rows, ]
testing.rows <- trainig.rows + 1
testing <- my.stock[testing.rows:nrow(my.stock),]
###################
#Logistic regresion is the simplest model to interpret
target <- training[[1]]
glm.fit <- glm(as.formula(paste(tickers[ticker.num],"~.",collapse="+")), data = training ,family = binomial)
glm.probs = predict(glm.fit, newdata = testing, type="response") #this code will predict on the training data, response outputs the probability
glm.probs[1:10]
print(hist(glm.probs), col = "red") #probablity that a given stock will go up
#turning the probability of up or down into 1 for up and 0 for down
glm.pred = rep(0, nrow(testing))
glm.pred[glm.probs >.5] = 1
##########################
#Result of logistic regression
print(table(glm.pred, testing[[1]]))#Typically the response variable is first
print(mean(glm.pred == testing[[1]])) #this gives the prediction accuracy in %
}
#Creating a filter so modeling is simplified
my.stock <- stocks.clean[ , grepl( tickers[ticker.num] , names( stocks.clean ) ) ]
#Creating testing and training datasets
trainig.rows <- nrow(my.stock)*.7
training <- my.stock[1:trainig.rows, ]
testing.rows <- trainig.rows + 1
testing <- my.stock[testing.rows:nrow(my.stock),]
###################
#Logistic regresion is the simplest model to interpret
target <- training[[1]]
glm.fit <- glm(as.formula(paste(tickers[ticker.num],"~.",collapse="+")), data = training ,family = binomial)
summary(glm.fit)
coef(glm.fit)
glm.probs = predict(glm.fit, newdata = testing, type="response") #this code will predict on the training data, response outputs the probability
glm.probs[1:10]
print(hist(glm.probs)) #probablity that a given stock will go up
#turning the probability of up or down into 1 for up and 0 for down
glm.pred = rep(0, nrow(testing))
glm.pred[glm.probs >.5] = 1
##########################
#Result of logistic regression
print(table(glm.pred, testing[[1]]))#Typically the response variable is first
print(mean(glm.pred == testing[[1]])) #this gives the prediction accuracy in %
?hist
#Select ticker to analyze
ticker.num <- 2
for(i in 1:length(tickers)){
ticker.num <- i #you can take this entire set of code out of the loop and manually enter #
#Creating a filter so modeling is simplified
my.stock <- stocks.clean[ , grepl( tickers[ticker.num] , names( stocks.clean ) ) ]
#Creating testing and training datasets
trainig.rows <- nrow(my.stock)*.7
training <- my.stock[1:trainig.rows, ]
testing.rows <- trainig.rows + 1
testing <- my.stock[testing.rows:nrow(my.stock),]
###################
#Logistic regresion is the simplest model to interpret
target <- training[[1]]
glm.fit <- glm(as.formula(paste(tickers[ticker.num],"~.",collapse="+")), data = training ,family = binomial)
glm.probs = predict(glm.fit, newdata = testing, type="response") #this code will predict on the training data, response outputs the probability
glm.probs[1:10]
print(hist(glm.probs, col = "red")) #probablity that a given stock will go up
#turning the probability of up or down into 1 for up and 0 for down
glm.pred = rep(0, nrow(testing))
glm.pred[glm.probs >.5] = 1
##########################
#Result of logistic regression
print(table(glm.pred, testing[[1]]))#Typically the response variable is first
print(mean(glm.pred == testing[[1]])) #this gives the prediction accuracy in %
}
#Creating a filter so modeling is simplified
my.stock <- stocks.clean[ , grepl( tickers[ticker.num] , names( stocks.clean ) ) ]
#Creating testing and training datasets
trainig.rows <- nrow(my.stock)*.7
training <- my.stock[1:trainig.rows, ]
testing.rows <- trainig.rows + 1
testing <- my.stock[testing.rows:nrow(my.stock),]
###################
#Logistic regresion is the simplest model to interpret
target <- training[[1]]
glm.fit <- glm(as.formula(paste(tickers[ticker.num],"~.",collapse="+")), data = training ,family = binomial)
summary(glm.fit)
coef(glm.fit)
glm.probs = predict(glm.fit, newdata = testing, type="response") #this code will predict on the training data, response outputs the probability
glm.probs[1:10]
print(hist(glm.probs)) #probablity that a given stock will go up
#turning the probability of up or down into 1 for up and 0 for down
glm.pred = rep(0, nrow(testing))
glm.pred[glm.probs >.5] = 1
##########################
#Result of logistic regression
print(table(glm.pred, testing[[1]]))#Typically the response variable is first
print(mean(glm.pred == testing[[1]])) #this gives the prediction accuracy in %
#Select ticker to analyze
ticker.num <- 2
for(i in 1:length(tickers)){
ticker.num <- i #you can take this entire set of code out of the loop and manually enter #
#Creating a filter so modeling is simplified
my.stock <- stocks.clean[ , grepl( tickers[ticker.num] , names( stocks.clean ) ) ]
#Creating testing and training datasets
trainig.rows <- nrow(my.stock)*.7
training <- my.stock[1:trainig.rows, ]
testing.rows <- trainig.rows + 1
testing <- my.stock[testing.rows:nrow(my.stock),]
###################
#Logistic regresion is the simplest model to interpret
target <- training[[1]]
glm.fit <- glm(as.formula(paste(tickers[ticker.num],"~.",collapse="+")), data = training ,family = binomial)
glm.probs = predict(glm.fit, newdata = testing, type="response") #this code will predict on the training data, response outputs the probability
glm.probs[1:10]
hist(glm.probs, col = "red") #probablity that a given stock will go up
#turning the probability of up or down into 1 for up and 0 for down
glm.pred = rep(0, nrow(testing))
glm.pred[glm.probs >.5] = 1
##########################
#Result of logistic regression
print(table(glm.pred, testing[[1]]))#Typically the response variable is first
print(mean(glm.pred == testing[[1]])) #this gives the prediction accuracy in %
}
#Creating a filter so modeling is simplified
my.stock <- stocks.clean[ , grepl( tickers[ticker.num] , names( stocks.clean ) ) ]
#Creating testing and training datasets
trainig.rows <- nrow(my.stock)*.7
training <- my.stock[1:trainig.rows, ]
testing.rows <- trainig.rows + 1
testing <- my.stock[testing.rows:nrow(my.stock),]
###################
#Logistic regresion is the simplest model to interpret
target <- training[[1]]
glm.fit <- glm(as.formula(paste(tickers[ticker.num],"~.",collapse="+")), data = training ,family = binomial)
summary(glm.fit)
coef(glm.fit)
glm.probs = predict(glm.fit, newdata = testing, type="response") #this code will predict on the training data, response outputs the probability
glm.probs[1:10]
print(hist(glm.probs)) #probablity that a given stock will go up
#turning the probability of up or down into 1 for up and 0 for down
glm.pred = rep(0, nrow(testing))
glm.pred[glm.probs >.5] = 1
##########################
#Result of logistic regression
print(table(glm.pred, testing[[1]]))#Typically the response variable is first
print(mean(glm.pred == testing[[1]])) #this gives the prediction accuracy in %
hist(glm.probs, col = "red")
#Select ticker to analyze
ticker.num <- 2
for(i in 1:length(tickers)){
ticker.num <- i #you can take this entire set of code out of the loop and manually enter #
#Creating a filter so modeling is simplified
my.stock <- stocks.clean[ , grepl( tickers[ticker.num] , names( stocks.clean ) ) ]
#Creating testing and training datasets
trainig.rows <- nrow(my.stock)*.7
training <- my.stock[1:trainig.rows, ]
testing.rows <- trainig.rows + 1
testing <- my.stock[testing.rows:nrow(my.stock),]
###################
#Logistic regresion is the simplest model to interpret
target <- training[[1]]
glm.fit <- glm(as.formula(paste(tickers[ticker.num],"~.",collapse="+")), data = training ,family = binomial)
glm.probs = predict(glm.fit, newdata = testing, type="response") #this code will predict on the training data, response outputs the probability
glm.probs[1:10]
hist(glm.probs, col = "red") #probablity that a given stock will go up
#turning the probability of up or down into 1 for up and 0 for down
glm.pred = rep(0, nrow(testing))
glm.pred[glm.probs >.5] = 1
##########################
#Result of logistic regression
print(table(glm.pred, testing[[1]]))#Typically the response variable is first
print(mean(glm.pred == testing[[1]])) #this gives the prediction accuracy in %
}
#Creating a filter so modeling is simplified
my.stock <- stocks.clean[ , grepl( tickers[ticker.num] , names( stocks.clean ) ) ]
#Creating testing and training datasets
trainig.rows <- nrow(my.stock)*.7
training <- my.stock[1:trainig.rows, ]
testing.rows <- trainig.rows + 1
testing <- my.stock[testing.rows:nrow(my.stock),]
###################
#Logistic regresion is the simplest model to interpret
target <- training[[1]]
glm.fit <- glm(as.formula(paste(tickers[ticker.num],"~.",collapse="+")), data = training ,family = binomial)
summary(glm.fit)
coef(glm.fit)
glm.probs = predict(glm.fit, newdata = testing, type="response") #this code will predict on the training data, response outputs the probability
glm.probs[1:10]
print(hist(glm.probs)) #probablity that a given stock will go up
#turning the probability of up or down into 1 for up and 0 for down
glm.pred = rep(0, nrow(testing))
glm.pred[glm.probs >.5] = 1
##########################
#Result of logistic regression
print(table(glm.pred, testing[[1]]))#Typically the response variable is first
print(mean(glm.pred == testing[[1]])) #this gives the prediction accuracy in %
paste0("GLM Probability", "-", tickers[1] )
#Select ticker to analyze
ticker.num <- 2
for(i in 1:length(tickers)){
ticker.num <- i #you can take this entire set of code out of the loop and manually enter #
#Creating a filter so modeling is simplified
my.stock <- stocks.clean[ , grepl( tickers[ticker.num] , names( stocks.clean ) ) ]
#Creating testing and training datasets
trainig.rows <- nrow(my.stock)*.7
training <- my.stock[1:trainig.rows, ]
testing.rows <- trainig.rows + 1
testing <- my.stock[testing.rows:nrow(my.stock),]
###################
#Logistic regresion is the simplest model to interpret
target <- training[[1]]
glm.fit <- glm(as.formula(paste(tickers[ticker.num],"~.",collapse="+")), data = training ,family = binomial)
glm.probs = predict(glm.fit, newdata = testing, type="response") #this code will predict on the training data, response outputs the probability
glm.probs[1:10]
hist(glm.probs, col = "red", main = paste0("GLM Probability", "-", tickers[i] )) #probablity that a given stock will go up
#turning the probability of up or down into 1 for up and 0 for down
glm.pred = rep(0, nrow(testing))
glm.pred[glm.probs >.5] = 1
##########################
#Result of logistic regression
print(table(glm.pred, testing[[1]]))#Typically the response variable is first
print(mean(glm.pred == testing[[1]])) #this gives the prediction accuracy in %
}
#Creating a filter so modeling is simplified
my.stock <- stocks.clean[ , grepl( tickers[ticker.num] , names( stocks.clean ) ) ]
#Creating testing and training datasets
trainig.rows <- nrow(my.stock)*.7
training <- my.stock[1:trainig.rows, ]
testing.rows <- trainig.rows + 1
testing <- my.stock[testing.rows:nrow(my.stock),]
###################
#Logistic regresion is the simplest model to interpret
target <- training[[1]]
glm.fit <- glm(as.formula(paste(tickers[ticker.num],"~.",collapse="+")), data = training ,family = binomial)
summary(glm.fit)
coef(glm.fit)
glm.probs = predict(glm.fit, newdata = testing, type="response") #this code will predict on the training data, response outputs the probability
glm.probs[1:10]
print(hist(glm.probs)) #probablity that a given stock will go up
#turning the probability of up or down into 1 for up and 0 for down
glm.pred = rep(0, nrow(testing))
glm.pred[glm.probs >.5] = 1
##########################
#Result of logistic regression
print(table(glm.pred, testing[[1]]))#Typically the response variable is first
print(mean(glm.pred == testing[[1]])) #this gives the prediction accuracy in %
#Select ticker to analyze
ticker.num <- 2
for(i in 1:length(tickers)){
ticker.num <- i #you can take this entire set of code out of the loop and manually enter #
#Creating a filter so modeling is simplified
my.stock <- stocks.clean[ , grepl( tickers[ticker.num] , names( stocks.clean ) ) ]
#Creating testing and training datasets
trainig.rows <- nrow(my.stock)*.7
training <- my.stock[1:trainig.rows, ]
testing.rows <- trainig.rows + 1
testing <- my.stock[testing.rows:nrow(my.stock),]
###################
#Logistic regresion is the simplest model to interpret
target <- training[[1]]
glm.fit <- glm(as.formula(paste(tickers[ticker.num],"~.",collapse="+")), data = training ,family = binomial)
glm.probs = predict(glm.fit, newdata = testing, type="response") #this code will predict on the training data, response outputs the probability
glm.probs[1:10]
hist(glm.probs, col = "red", main = paste0("GLM Probability", "-", tickers[i] )) #probablity that a given stock will go up
#turning the probability of up or down into 1 for up and 0 for down
glm.pred = rep(0, nrow(testing))
glm.pred[glm.probs >.5] = 1
##########################
#Result of logistic regression
print(table(glm.pred, testing[[1]]))#Typically the response variable is first
print(mean(glm.pred == testing[[1]])) #this gives the prediction accuracy in %
}
#Creating a filter so modeling is simplified
my.stock <- stocks.clean[ , grepl( tickers[ticker.num] , names( stocks.clean ) ) ]
#Creating testing and training datasets
trainig.rows <- nrow(my.stock)*.7
training <- my.stock[1:trainig.rows, ]
testing.rows <- trainig.rows + 1
testing <- my.stock[testing.rows:nrow(my.stock),]
###################
#Logistic regresion is the simplest model to interpret
target <- training[[1]]
glm.fit <- glm(as.formula(paste(tickers[ticker.num],"~.",collapse="+")), data = training ,family = binomial)
summary(glm.fit)
coef(glm.fit)
glm.probs = predict(glm.fit, newdata = testing, type="response") #this code will predict on the training data, response outputs the probability
glm.probs[1:10]
print(hist(glm.probs)) #probablity that a given stock will go up
#turning the probability of up or down into 1 for up and 0 for down
glm.pred = rep(0, nrow(testing))
glm.pred[glm.probs >.5] = 1
##########################
#Result of logistic regression
print(table(glm.pred, testing[[1]]))#Typically the response variable is first
print(mean(glm.pred == testing[[1]])) #this gives the prediction accuracy in %
#Select ticker to analyze
ticker.num <- 2
for(i in 1:length(tickers)){
ticker.num <- i #you can take this entire set of code out of the loop and manually enter #
#Creating a filter so modeling is simplified
my.stock <- stocks.clean[ , grepl( tickers[ticker.num] , names( stocks.clean ) ) ]
#Creating testing and training datasets
trainig.rows <- nrow(my.stock)*.7
training <- my.stock[1:trainig.rows, ]
testing.rows <- trainig.rows + 1
testing <- my.stock[testing.rows:nrow(my.stock),]
###################
#Logistic regresion is the simplest model to interpret
target <- training[[1]]
glm.fit <- glm(as.formula(paste(tickers[ticker.num],"~.",collapse="+")), data = training ,family = binomial)
glm.probs = predict(glm.fit, newdata = testing, type="response") #this code will predict on the training data, response outputs the probability
glm.probs[1:10]
hist(glm.probs, col = "red", main = paste0("GLM Probability", "-", tickers[i] )) #probablity that a given stock will go up
#turning the probability of up or down into 1 for up and 0 for down
glm.pred = rep(0, nrow(testing))
glm.pred[glm.probs >.5] = 1
##########################
#Result of logistic regression
print(table(glm.pred, testing[[1]]))#Typically the response variable is first
print(mean(glm.pred == testing[[1]])) #this gives the prediction accuracy in %
}
tickers
